@page "/edit-festival/{Id}"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject OrganisatorService organisatorService
@using Festifact.Models
@using Festifact.Services
@using System.Net.Http.Json

<h3>Edit Festival</h3>

<form @onsubmit="UpdateFestivalAsync">
    <div class="form-group">
        <label for="naam">Naam:</label>
        <input id="naam" class="form-control" type="text" @bind="festival.Naam" required />
    </div>

    <div class ="form-group">
        <label for="beschrijving">Beschrijving:</label>
        <input id="beschrijving" class="form-control" type="text" @bind="festival.Beschrijving" required />
    </div >

    <div class="form-group">
        <label for="bannerAfbeelding">Banner Afbeelding:</label>
        <input id="bannerAfbeelding" class="form-control" type="text" @bind="festival.BannerAfbeelding" required />
    </div>
    <div class="form-group">
        <img src="@festival.BannerAfbeelding" alt="Festival Banner" />
    </div>

    <div class="form-group">
        <label for="type">Type:</label>
        <input id="type" class="form-control" type="text" @bind="festival.Type" required />
    </div>

    <div class="form-group">
        <label for="genre">Genre:</label>
        <input id="genre" class="form-control" type="text" @bind="festival.Genre" required />
    </div>

    <div class="form-group">
        <label for="leeftijdscategorieVan">Leeftijdscategorie Van:</label>
        <input id="leeftijdscategorieVan" class="form-control" type="number" @bind="festival.LeeftijdscategorieVan" @oninput="@(async () => await InvokeAsync(() => { StateHasChanged(); }))" required />
    </div>

    <div class="form-group">
        <label for="leeftijdscategorieTot">Leeftijdscategorie Tot:</label>
        <input id="leeftijdscategorieTot" class="form-control" type="number" @bind="festival.LeeftijdscategorieTot" @oninput="@(async () => await InvokeAsync(() => { StateHasChanged(); }))" required />
    </div>

    <div class="form-group">
        <label for="startDatum">Start Datum:</label>
        <input type="date" class="form-control" id="startDatum" @bind="festival.StartDatum" />
    </div>

    <div class="form-group">
        <label for="eindDatum">Eind Datum:</label>
        <input type="date" class="form-control" id="eindDatum" @bind="festival.EindDatum" />
    </div>

    <button class="btn btn-secondary" @onclick="GoToCreateVoorstelling">Maak voorstelling</button>

    <button class="btn btn-primary" type="submit">Update</button>
</form>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">@errorMessage</div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Festival festival = new Festival();
    private string errorMessage;
    private List<Organisator> organisators;

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        festival = await httpClient.GetFromJsonAsync<Festival>($"/api/Festivals/{Id}");
        organisators = await organisatorService.GetOrganisatorsAsync();
        StateHasChanged();
    }

    private async Task UpdateFestivalAsync()
    {
        HttpResponseMessage response = await httpClient.PatchAsJsonAsync($"/api/Festivals/{Id}", festival);
        if (response.IsSuccessStatusCode)
        {
            // Handle successful update
            navigationManager.NavigateTo("/");
        }
        else
        {
            // Handle error
            errorMessage = "Failed to update Festival. Please try again.";
        }
    }

    private void GoToCreateVoorstelling()
    {
        
    }
}
