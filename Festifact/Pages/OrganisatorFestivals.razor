@page "/organisator-festivals"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@using Festifact.Models
@using System.Net.Http.Json

<h3>Festivals</h3>

<p>
    <button class="btn btn-primary" @onclick="CreateNewFestival">Create New Festival</button>
</p>

@if (festivals == null)
{
    <p>Loading festivals...</p>
}
else if (festivals.Any())
{
    <div class="card-deck">
        @foreach (var festival in festivals)
        {
            var statistics = CalculateFestivalStatistics(festival);

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@festival.Naam</h5>
                    <p class="card-text">
                        Type: @festival.Type<br />
                        Number of Voorstellingen: @statistics.NumberOfVoorstellingen<br />
                        Number of Artiesten: @statistics.NumberOfArtiesten<br />
                        Number of Tickets Bought: @statistics.NumberOfTicketsBought<br />
                        Number of Tickets Left: @statistics.NumberOfTicketsLeft<br />
                        Ratings:
                        @if (statistics.Ratings.Any())
                        {
                            <br />
                            foreach (var rating in statistics.Ratings)
                            {
                                <span class="">&nbsp;&nbsp;@rating.Key: @rating.Value</span>
                                <br />
                            }
                        }
                        else
                        {
                            <span class="">No ratings</span>
                        }
                    </p>
                    <button class="btn btn-primary" @onclick="() => GoToEditFestival(festival.Id ?? 0)">Edit</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No festivals found.</p>
}

@code {
    private List<Festival> festivals;
    private List<Ticket> tickets;

    protected override async Task OnInitializedAsync()
    {
        festivals = await httpClient.GetFromJsonAsync<List<Festival>>("/api/Festivals");
        tickets = await httpClient.GetFromJsonAsync<List<Ticket>>("/api/Tickets");
    }

    private void GoToEditFestival(int festivalId)
    {
        if (festivalId != 0)
        {
            navigationManager.NavigateTo($"/edit-festival/{festivalId}");
        }
    }

    private FestivalStatistics CalculateFestivalStatistics(Festival festival)
    {
        var statistics = new FestivalStatistics
            {
                NumberOfVoorstellingen = festival.Voorstellingen.Count,
                NumberOfArtiesten = festival.Voorstellingen.Select(v => v.ArtiestId).Distinct().Count(),
                NumberOfTicketsBought = tickets.Count(t => t.VoorstellingId == festival.Id),
                NumberOfTicketsLeft = festival.Voorstellingen.Sum(v => v.Zaal?.Capaciteit ?? 0) - tickets.Count(t => t.VoorstellingId == festival.Id),
                Ratings = new Dictionary<int, int>()
            };

        foreach (var voorstelling in festival.Voorstellingen)
        {
            if (voorstelling.Ratings != null)
            {
                foreach (var rating in voorstelling.Ratings)
                {
                    var score = rating.Score ?? 0;
                    if (statistics.Ratings.ContainsKey(score))
                    {
                        statistics.Ratings[score]++;
                    }
                    else
                    {
                        statistics.Ratings[score] = 1;
                    }
                }
            }
        }

        return statistics;
    }

    private void CreateNewFestival()
    {
        navigationManager.NavigateTo("/create-festival");
    }
}
